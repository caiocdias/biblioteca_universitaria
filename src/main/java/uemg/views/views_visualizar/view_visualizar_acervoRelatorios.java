package uemg.views.views_visualizar;


import uemg.dao.dao_acervoRelatorios;
import uemg.models.classes.Acervo;
import uemg.models.classes.acervoRelatorios;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.SQLException;
import java.util.ArrayList;

public class view_visualizar_acervoRelatorios {
    private JPanel panelVisualizar;
    private JTable tableAcervo;
    private JButton btnExcluir;
    private DefaultTableModel tableModel;

    public view_visualizar_acervoRelatorios() {
        JFrame frame = new JFrame("Visualizar Acervo Relatorios");
        panelVisualizar = new JPanel(new BorderLayout());
        frame.setContentPane(panelVisualizar);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(800, 400);
        frame.setLocation(500, 300);

        initializeTable();
        loadTableData();

        btnExcluir = new JButton("Excluir registro selecionado");
        btnExcluir.addActionListener(e -> deleteSelectedRow());
        panelVisualizar.add(btnExcluir, BorderLayout.SOUTH);

        frame.pack();
        frame.setVisible(true);
    }

    private void initializeTable() {
        tableModel = new DefaultTableModel(new Object[]{"ID", "Título", "Ano", "Autor", "Emprestado", "CDU", "Palavras-chave", "Qtd Pág", "Editora", "Edicao"}, 0);
        tableAcervo.setModel(tableModel);
        JScrollPane scrollPane = new JScrollPane(tableAcervo);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        panelVisualizar.add(scrollPane, BorderLayout.CENTER);
    }

    private void loadTableData() {
        try {
            ArrayList<Acervo> acervos = new ArrayList<Acervo>();
            dao_acervoRelatorios.getAllAcervoRelatoriosDB(acervos);
            for (Acervo acervo : acervos) {
                if (acervo instanceof acervoRelatorios) {
                    acervoRelatorios relatorio = (acervoRelatorios) acervo;
                    tableModel.addRow(new Object[]{
                            relatorio.getAcervoId(),
                            relatorio.getAcervoTitulo(),
                            relatorio.getAcervoAno(),
                            relatorio.getAcervoAutores(),
                            relatorio.isAcervoFlagEmprestado(),
                            relatorio.getAcervoCDU(),
                            relatorio.getAcervoPalavrasChave(),
                            relatorio.getRelatoriosQtdPaginas(),
                            relatorio.getRelatoriosEditora(),
                            relatorio.getRelatoriosCidade()
                    });
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(panelVisualizar, "Erro ao carregar dados do banco de dados.");
            e.printStackTrace();
        }
    }

    private void deleteSelectedRow() {
        int selectedRow = tableAcervo.getSelectedRow();
        if (selectedRow >= 0) {
            int acervoId = (int) tableModel.getValueAt(selectedRow, 0);
            acervoRelatorios acervoAux = new acervoRelatorios();
            acervoAux.setAcervoId(acervoId);
            try {
                if (dao_acervoRelatorios.excluirAcervoRelatoriosDB(acervoAux)) {
                    tableModel.removeRow(selectedRow);
                    JOptionPane.showMessageDialog(panelVisualizar, "Registro excluído com sucesso.");
                } else {
                    JOptionPane.showMessageDialog(panelVisualizar, "Erro ao excluir registro.");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(panelVisualizar, "Erro ao excluir registro.");
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(panelVisualizar, "Selecione uma linha para excluir.");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelVisualizar = new JPanel();
        panelVisualizar.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panelVisualizar, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tableAcervo = new JTable();
        panelVisualizar.add(tableAcervo, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        btnExcluir = new JButton();
        btnExcluir.setText("Excluir registro selecionado");
        panelVisualizar.add(btnExcluir, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }
}
